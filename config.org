#+TITLE: Emacs Config
#+AUTHOR: Adwait Adhikari
#+PROPERTY: header-args :tangle init.el
#+STARTUP: showeverything
#+OPTIONS: toc:2 ^:{}
#+auto_tangle: t

* Table of Contents :TOC:
- [[#important-initializations][Important Initializations]]
  - [[#early-init][Early Init]]
  - [[#loading-scripts--custom-file][Loading Scripts & Custom File]]
  - [[#evil-mode][Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
  - [[#icons][Icons]]
  - [[#mode-line][Mode-line]]
  - [[#sane-defaults][Sane Defaults]]
  - [[#session-preservation][Session Preservation]]
  - [[#theme][Theme]]
  - [[#which-key][Which Key]]
- [[#applications][Applications]]
  - [[#avy][Avy]]
  - [[#browse-url][Browse URL]]
  - [[#buffer-alist][Buffer Alist]]
  - [[#buffer-commands][Buffer Commands]]
  - [[#buffer-terminator][Buffer Terminator]]
  - [[#calibre][Calibre]]
  - [[#expand-region][Expand Region]]
  - [[#elfeed][Elfeed]]
  - [[#eww][EWW]]
  - [[#gptel][Gptel]]
  - [[#jinx][Jinx]]
  - [[#language-tool][Language Tool]]
  - [[#mu4e][Mu4e]]
  - [[#obsidian][Obsidian]]
  - [[#pdf-tools][PDF Tools]]
  - [[#popper][Popper]]
  - [[#ultra-scroll][Ultra Scroll]]
  - [[#uniline][Uniline]]
  - [[#wombag][Wombag]]
- [[#buffer-management][Buffer Management]]
  - [[#ibuffer][Ibuffer]]
  - [[#perspective][Perspective]]
- [[#development][Development]]
  - [[#preview][Preview]]
  - [[#completions][Completions]]
  - [[#direnv][Direnv]]
  - [[#formatters][Formatters]]
  - [[#flycheck][Flycheck]]
  - [[#eglot][Eglot]]
  - [[#language-specific][Language Specific]]
  - [[#ligatures][Ligatures]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#projectile][Projectile]]
  - [[#sops][SOPS]]
  - [[#treesitter][Treesitter]]
  - [[#yasnippets][Yasnippets]]
- [[#dired][Dired]]
  - [[#diredfl][Diredfl]]
  - [[#dirvish][Dirvish]]
  - [[#dired-open][Dired Open]]
  - [[#peep-dired][Peep Dired]]
- [[#fonts][Fonts]]
  - [[#setting-font-faces][Setting Font Faces]]
  - [[#zooming-inout][Zooming In/Out]]
- [[#git][Git]]
  - [[#diff-hl][Diff HL]]
  - [[#magit][Magit]]
- [[#helpful][Helpful]]
- [[#minibuffer-completion][Minibuffer Completion]]
  - [[#consult][Consult]]
  - [[#embark][Embark]]
  - [[#extended-settings][Extended Settings]]
  - [[#icons-1][Icons]]
  - [[#marginalia][Marginalia]]
  - [[#oderless][Oderless]]
  - [[#vertico][Vertico]]
- [[#org-mode][Org Mode]]
  - [[#custom-functions][Custom Functions]]
  - [[#better-fonts][Better Fonts]]
  - [[#settings][Settings]]
  - [[#denote][Denote]]
  - [[#org-agenda][Org Agenda]]
  - [[#org-download][Org Download]]
  - [[#org-latex][Org Latex]]
  - [[#org-protocol][Org Protocol]]
  - [[#org-superstar][Org Superstar]]
  - [[#org-todoist][Org Todoist]]
  - [[#prettify-symbols][Prettify Symbols]]
  - [[#small-utilities][Small Utilities]]
  - [[#svg-tags][SVG Tags]]
  - [[#visual-fill-column][Visual Fill Column]]
- [[#shells--terminals][Shells & Terminals]]
  - [[#eshell][Eshell]]
  - [[#vterm][Vterm]]
- [[#undo][Undo]]
  - [[#undo-fu][Undo Fu]]
  - [[#vundo][Vundo]]

* Important Initializations
** Early Init
Emacs is an Elisp interpreter, and when running programs or packages, it can occasionally experience pauses due to garbage collection. By increasing the garbage collection threshold, we reduce these pauses during heavy operations, leading to smoother performance. The default is 800 kilobytes. Measured in bytes.

~most-positive-fixnum~ is *DANGEROUS AS A PERMANENT VALUE*. See the ~elpaca-after-init-hook~ for what I actually use.
#+begin_src emacs-lisp :tangle early-init.el
  ;;; early-init.el --- Early Init -*- no-byte-compile: t; lexical-binding: t; -*-

  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.5)

  (add-hook 'elpaca-after-init-hook
            (lambda ()
              (setq gc-cons-threshold (* 64 1024 1024)
                    gc-cons-percentage 0.1)))

#+end_src

Performance optimizations and other tweaks taken from [[https://github.com/jamescherti/minimal-emacs.d/blob/main/early-init.el][minimal-emacs.d]]
#+begin_src emacs-lisp :tangle early-init.el
  ;;; Misc

  (set-language-environment "UTF-8")

  ;; Set-language-environment sets default-input-method, which is unwanted.
  (setq default-input-method nil)

  ;;; Performance
  ;; Prefer loading newer compiled files
  (setq load-prefer-newer t)

  ;; Font compacting can be very resource-intensive, especially when rendering
  ;; icon fonts on Windows. This will increase memory usage.
  (setq inhibit-compacting-font-caches t)

  (unless (daemonp)
    (let ((old-value (default-toplevel-value 'file-name-handler-alist)))
      (set-default-toplevel-value
       'file-name-handler-alist
       ;; Determine the state of bundled libraries using calc-loaddefs.el.
       ;; If compressed, retain the gzip handler in `file-name-handler-alist`.
       ;; If compiled or neither, omit the gzip handler during startup for
       ;; improved startup and package load time.
       (if (eval-when-compile
             (locate-file-internal "calc-loaddefs.el" load-path))
           nil
         (list (rassq 'jka-compr-handler old-value))))
      ;; Ensure the new value persists through any current let-binding.
      (set-default-toplevel-value 'file-name-handler-alist
                                  file-name-handler-alist)
      ;; Remember the old value to reset it as needed.
      (add-hook 'emacs-startup-hook
                (lambda ()
                  (set-default-toplevel-value
                   'file-name-handler-alist
                   ;; Merge instead of overwrite to preserve any changes made
                   ;; since startup.
                   (delete-dups (append file-name-handler-alist old-value))))
                101))

    (unless noninteractive
          ;; Suppress redisplay and redraw during startup to avoid delays and
          ;; prevent flashing an unstyled Emacs frame.
          ;; (setq-default inhibit-redisplay t) ; Can cause artifacts
          (setq-default inhibit-message t)

          ;; Reset the above variables to prevent Emacs from appearing frozen or
          ;; visually corrupted after startup or if a startup error occurs.
          (defun minimal-emacs--reset-inhibited-vars-h ()
            ;; (setq-default inhibit-redisplay nil) ; Can cause artifacts
            (setq-default inhibit-message nil)
            (remove-hook 'post-command-hook #'minimal-emacs--reset-inhibited-vars-h))

          (add-hook 'post-command-hook
                    #'minimal-emacs--reset-inhibited-vars-h -100))

        (dolist (buf (buffer-list))
          (with-current-buffer buf
            (setq mode-line-format nil)))

        (put 'mode-line-format 'initial-value
             (default-toplevel-value 'mode-line-format))
        (setq-default mode-line-format nil)

        (defun minimal-emacs--startup-load-user-init-file (fn &rest args)
          "Advice for startup--load-user-init-file to reset mode-line-format."
          (unwind-protect
              (progn
                ;; Start up as normal
                (apply fn args))
            ;; If we don't undo inhibit-{message, redisplay} and there's an
            ;; error, we'll see nothing but a blank Emacs frame.
            (setq-default inhibit-message nil)
            (unless (default-toplevel-value 'mode-line-format)
              (setq-default mode-line-format
                            (get 'mode-line-format 'initial-value)))))

        (advice-add 'startup--load-user-init-file :around
                    #'minimal-emacs--startup-load-user-init-file))

      ;; Without this, Emacs will try to resize itself to a specific column size
      (setq frame-inhibit-implied-resize t)

      ;; A second, case-insensitive pass over `auto-mode-alist' is time wasted.
      ;; No second pass of case-insensitive search over auto-mode-alist.
      (setq auto-mode-case-fold nil)

      ;; Reduce *Message* noise at startup. An empty scratch buffer (or the
      ;; dashboard) is more than enough, and faster to display.
      (setq inhibit-startup-screen t
            inhibit-startup-echo-area-message user-login-name)
      (setq initial-buffer-choice nil
            inhibit-startup-buffer-menu t
            inhibit-x-resources t)

      ;; Disable bidirectional text scanning for a modest performance boost.
      (setq-default bidi-display-reordering 'left-to-right
                    bidi-paragraph-direction 'left-to-right)

      ;; Give up some bidirectional functionality for slightly faster re-display.
      (setq bidi-inhibit-bpa t)

      ;; Remove "For information about GNU Emacs..." message at startup
      (advice-add #'display-startup-echo-area-message :override #'ignore)

      ;; Suppress the vanilla startup screen completely. We've disabled it with
      ;; `inhibit-startup-screen', but it would still initialize anyway.
      (advice-add #'display-startup-screen :override #'ignore)

      ;; Shave seconds off startup time by starting the scratch buffer in
      ;; `fundamental-mode'
      (setq initial-major-mode 'fundamental-mode
            initial-scratch-message nil)

      ;; Unset command line options irrelevant to the current OS. These options
      ;; are still processed by `command-line-1` but have no effect.
      (unless (eq system-type 'darwin)
        (setq command-line-ns-option-alist nil))
      (unless (memq initial-window-system '(x pgtk))
        (setq command-line-x-option-alist nil))

  ;;; Native compilation and Byte compilation

  (if (and (featurep 'native-compile)
           (fboundp 'native-comp-available-p)
           (native-comp-available-p))
      ;; Activate `native-compile'
      (setq native-comp-jit-compilation t
            package-native-compile t)
    ;; Deactivate the `native-compile' feature if it is not available
    (setq features (delq 'native-compile features)))

  ;; Disable startup screens and messages
  (setq inhibit-splash-screen t)

  ;; I intentionally avoid calling `menu-bar-mode', `tool-bar-mode', and
  ;; `scroll-bar-mode' because manipulating frame parameters can trigger or queue
  ;; a superfluous and potentially expensive frame redraw at startup, depending
  ;; on the window system. The variables must also be set to `nil' so users don't
  ;; have to call the functions twice to re-enable them.
  (push '(menu-bar-lines . 0) default-frame-alist)
  (unless (memq window-system '(mac ns))
    (setq menu-bar-mode nil))

  (unless (daemonp)
    (unless noninteractive
      (when (fboundp 'tool-bar-setup)
        ;; Temporarily override the tool-bar-setup function to prevent it from
        ;; running during the initial stages of startup
        (advice-add #'tool-bar-setup :override #'ignore)
        (define-advice startup--load-user-init-file
            (:after (&rest _) minimal-emacs-setup-toolbar)
          (advice-remove #'tool-bar-setup #'ignore)
          (when tool-bar-mode
            (tool-bar-setup))))))

  (push '(tool-bar-lines . 0) default-frame-alist)
  (setq tool-bar-mode nil)

  (push '(vertical-scroll-bars) default-frame-alist)
  (push '(horizontal-scroll-bars) default-frame-alist)
  (setq scroll-bar-mode nil)
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))

  (when (bound-and-true-p tooltip-mode)
    (tooltip-mode -1))

  ;; Disable GUIs because they are inconsistent across systems, desktop
  ;; environments, and themes, and they don't match the look of Emacs.
  (setq use-file-dialog nil)
  (setq use-dialog-box nil)

#+end_src

The early init file contains disabling ~package.el~, Emacs' default package manager, as we are about to use [[https://github.com/progfolio/elpaca][elpaca]] for package management.
#+begin_src emacs-lisp :tangle early-init.el

  (setq package-enable-at-startup nil)

#+end_src

We are also setting const variables to locate our custom Emacs directories.
#+begin_src emacs-lisp
  ;;; init.el --- Init -*- no-byte-compile: t; lexical-binding: t; -*-

  (defconst nox/emacs-directory (concat (getenv "XDG_CONFIG_HOME") "/minimal-emacs/" ))
  (defconst nox/notes-directory (concat (getenv "HOME") "/Documents/notes/"))
  (defconst nox/tasks-directory (concat (getenv "HOME") "/Documents/tasks/"))
  (defconst nox/schedule-file (concat nox/tasks-directory "schedule.org"))

#+end_src

** Loading Scripts & Custom File
Displaying the time it took for Emacs to start along with total number of garbage collections at startup. Throughout this file we also replace ~emacs-startup-hook~ and ~after-init-hook~ with =elpaca-after-init-hook= since we are using [[https://github.com/progfolio/elpaca][elpaca]] for package management.
#+begin_src emacs-lisp
  ;;; init.el --- file for init -*- no-byte-compile: t; lexical-binding: t; -*-

  (defun nox/display-startup-time ()
    "Display the emacs startup time"
    (interactive)
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

#+end_src

Here we specify the ~scripts~ directory to contains other Elisp files that we are about to load. We also specify a custom ~custom-file~ so that Emacs doesn't mess-up out ~init.el~.
#+begin_src emacs-lisp

  (add-to-list 'load-path (concat nox/emacs-directory "scripts/"))

  ;; Specify the custom file path and load the custom file quietly
  (setq custom-file (concat nox/emacs-directory "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)

  (require 'elpaca-setup)   ;; Elpaca Package Manager
  (require 'on)             ;; Doom Style Hooks
  (require 'minimal)        ;; emacs config from minimal-emacs.d
  (require 'link-converter) ;; md <=> converter

#+end_src

*** Custom Functions
This section defines custom Emacs Lisp functions.
#+begin_src emacs-lisp

  (defun nox/get-secret (path)
    "Retrieve the secret from the specified PATH within the SOPS-Nix configuration."
    (nth 0 (process-lines "cat"
                          (concat
                           (getenv "XDG_CONFIG_HOME")
                           "/sops-nix/secrets/" path))))

#+end_src

** Evil Mode
[[https://github.com/emacs-evil/evil][Evil mode]], emulating vim key-binds inside Emacs. *Truly Evil!* Here we also change the undo system to utilize [[#undo-fu][undo fu]].
#+begin_src emacs-lisp

  (use-package evil
    :custom
    (evil-want-integration t)
    (evil-want-C-u-scroll t)
    (evil-want-keybinding nil)
    (evil-undo-system 'undo-fu)
    (evil-vsplit-window-right t)
    (evil-vsplit-window-below t)
    :config
    (evil-mode)

#+end_src

Motion state is an Evil-specific thing, intended for modes where you don't edit text, but still want Vim-style movement available, with all other keys of that mode passing through. Help buffers are an example of such a case.
#+begin_src emacs-lisp

  (evil-define-key 'motion 'global
    (kbd "C-w u") 'winner-undo
    "j" 'evil-next-visual-line
    "k" 'evil-previous-visual-line)

#+end_src

Here we are setting bindings for normal mode globally.
#+begin_src emacs-lisp

  (evil-define-key 'normal 'global
    (kbd "C-S-v") 'cua-set-mark
    "s" 'evil-avy-goto-char-timer)

#+end_src

These are some niceties that I want cause I have been using them for a long time.
#+begin_src emacs-lisp

  (evil-define-key '(normal visual) 'global
    "P" 'consult-yank-from-kill-ring
    "H" 'evil-first-non-blank
    "?" 'gptel-quick
    "L" 'evil-end-of-line)

#+end_src

We can also set bindings specific to a mode. Here we are setting bindings specific to normal state in org-mode.
#+begin_src emacs-lisp

  (evil-define-key 'normal org-mode-map
    "J" 'org-shiftright
    "K" 'org-shiftleft)

#+end_src

With the same vein of thought we have also added a binding to elfeed search mode to easily view an entry.
#+begin_src emacs-lisp

  (unbind-key "C-e" evil-insert-state-map)

  (evil-define-key 'normal elfeed-search-mode-map
    "l" 'elfeed-search-show-entry))

#+end_src

We are also installing evil-collection so that we have sane evil bindings in almost all modes.
#+begin_src emacs-lisp

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init)
    :custom
    (evil-collection-calendar-want-org-bindings t)
    (evil-collection-want-find-usages-bindings t))

#+end_src

[[https://github.com/Somelauw/evil-org-mode][Evil Org]] is a plugin for Emacs that integrates Evil with Org Mode, allowing for modal editing features from Evil to be used within Org documents, enhancing text editing and navigation capabilities.
#+begin_src emacs-lisp

  (use-package evil-org
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

#+end_src

** General Keybindings
[[https://github.com/noctuid/general.el][General]] helps set key-binds for Emacs. The following contains all the rest of key-binds that don't directly relate to evil binds. Here we also set =SPC= as the prefix key and =C-SPC= as global prefix. Global prefix basically means prefix key but in every single state.
#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :config
    (general-evil-setup)
    (general-create-definer nox/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "C-SPC")

#+end_src

Bindings specific to application inside Emacs.
#+begin_src emacs-lisp

  (nox/leader-keys
    "a" '(:ignore t :wk "[A]pplications")
    "a c" '(calendar :wk "[C]alendar")
    "a C" '(calibredb :wk "[C]alibre")
    "a e" '(elfeed :wk "[E]lfeed")
    "a g" '(gptel :wk "[G]ptel")
    "a w" '(wombag :wk "[W]ombag")
    "a m" '(mu4e :wk "[M]ail"))

#+end_src

Bindings specific to buffer management go here.
#+begin_src emacs-lisp

  (nox/leader-keys
    "b" '(:ignore t :wk "[B]uffer")
    "b b" '(consult-buffer :wk "[B]uffer Switch")
    "b i" '(persp-ibuffer :wk "[I]buffer")
    "b k" '(kill-current-buffer :wk "[K]ill Buffer")
    "b n" '(next-buffer :wk "[N]ext Buffer")
    "b p" '(previous-buffer :wk "[P]revious Buffer")
    "b s" '(hydra-buffer-switch/body :wk "[S]witch Buffer")
    "b r" '(revert-buffer :wk "[R]eload Buffer"))

#+end_src

Bindings specific to dired go here.
#+begin_src emacs-lisp

  (nox/leader-keys
    "d" '(:ignore t :wk "[D]ired")
    "d ." '(dired-omit-mode :wk "Toggle dot files")
    "d d" '(dirvish :wk "[D]irvish")
    "d h" '(dired-hide-details-mode :wk "[D]ired")
    "d p" '(peep-dired :wk "[P]eep Dired"))

#+end_src

Bindings specific to evaluating Elisp go here.
#+begin_src emacs-lisp

  (nox/leader-keys
    "e" '(:ignore t :wk "[E]val")
    "e b" '(eval-buffer :wk "[B]uffer Eval")
    "e d" '(eval-defun :wk "[D]efun Eval")
    "e e" '(eval-expression :wk "[E]xpression Eval")
    "e l" '(eval-last-sexp :wk "[E]xpression Before Eval")
    "e r" '(eval-region :wk "[R]egion Eval"))

#+end_src

Bindings which relates to files go here.
#+begin_src emacs-lisp

  (nox/leader-keys
    "f" '(:ignore t :wk "[F]ile")
    "f c" `((lambda () (interactive) (find-file ,(concat nox/emacs-directory "config.org")))
            :wk "[C]onfig File")
    "f t" `((lambda () (interactive) (find-file nox/schedule-file)) :wk "[T]asks File")
    "f s" '(save-buffer :wk "[S]ave Buffer")
    "f d" '(bufferfile-delete :wk "[D]elete File")
    "f r" '(bufferfile-rename :wk "[R]ename File")
    "f u" '(sudo-edit-find-file :wk "S[U]do Find File")
    "f U" '(sudo-edit :wk "S[U]do Edit File"))

#+end_src

Bindings specific to working with git go here.
#+begin_src emacs-lisp

  (nox/leader-keys
    "g" '(:ignore t :wk "[G]it")
    "g g" '(magit-status :wk "[G]it Status")
    "g c" '(magit-commit-create :wk "[G]it Commit")
    "g n" '(diff-hl-next-hunk :wk "[N]ext hunk")
    "g p" '(diff-hl-previous-hunk :wk "[P]revious hunk")
    "g s" '(diff-hl-stage-dwim :wk "[G]it Stage Hunk"))

#+end_src

Bindings specic to org things go here.
#+begin_src emacs-lisp

  (nox/leader-keys
    "o" '(:ignore t :wk "[O]rg")
    "o a" '(org-agenda :wk "[A]genda")
    "o c" '(org-capture :wk "[C]apture")
    "o x" '(org-toggle-checkbox :wk "[C]heckbox")
    "o L" '(org-store-link :wk "[L]ink Store")
    "o b" '(:ignore t :wk "[B]abel")
    "o b t" '(org-babel-tangle :wk "[T]angle")
    "o b d" '(org-babel-demarcate-block :wk "[D]emarcate Block"))
#+end_src

Bindings specific to org properties.
#+begin_src emacs-lisp

  (nox/leader-keys
    "o p" '(:ignore t :wk "[P]roperties")
    "o p e" '(org-set-effort :wk "[E]ffort")
    "o p t" '(nox/org-toggle-properties :wk "[T]oggle Properties"))
#+end_src

Bindings even more specific to [[#denote][denote]].
#+begin_src emacs-lisp

  (nox/leader-keys
    "o g" '(consult-denote-grep :wk "[G]rep in Denote")
    "o l" '(denote-link :wk "[L]ink Denote Note")
    "o r" '(denote-explore-random-note :wk "[R]andom Note")
    "o f" '(consult-denote-find :wk "[F]ind in Denote"))

#+end_src

Bindings related to quitting utilities in Emacs go here. /Hardly ever used!/ But seriously, these come in handy especially the restore perspectives for [[#perspective][perspective]].
#+begin_src emacs-lisp

  (nox/leader-keys
    "q" '(:ignore t :wk "[Q]uit")
    "q f" '(delete-frame :wk "[F]rame delete")
    "q r" '(nox/restore-perspectives :wk "[R]estore perspectives")
    "q K" '(kill-emacs :wk "[K]ill emacs"))

#+end_src

Bindings related to performing search of any kind go here.
#+begin_src emacs-lisp

  (nox/leader-keys
    "s" '(:ignore t :wk "[S]earch")
    "s g" '(consult-ripgrep :wk "[G]rep in dir")
    "s i" '(consult-imenu :wk "[I]menu")
    "s f" '(consult-fd :wk "[F]d Consult")
    "s r" '(consult-recent-file :wk "[R]recent File")
    "s m" '(bookmark-jump :wk "[M]arks")
    "s c" '(consult-mode-command :wk "[C]ommands for mode"))

#+end_src

Bindings specific to toggling things go here.
#+begin_src emacs-lisp

  (nox/leader-keys
    "t" '(:ignore t :wk "[T]oggle")
    "t e" '(eshell :wk "[E]shell")
    "t l" '(elpaca-log :wk "[L]og Elpaca")
    "t t" '(nox/toggle-catppuccin :wk "[T]oggle Theme")
    "t c" '(visual-fill-column-mode :wk "[C]olumn Fill Mode")
    "t v" '(vterm :wk "[V]term")
    "t n" '(display-line-numbers-mode :wk "[N]umbered Lines")
    "t s" '(hydra-text-scale/body :wk "[S]cale Text"))

#+end_src

Anything that doesn't go in the above categories go here.
#+begin_src emacs-lisp

  (nox/leader-keys
    "." '(find-file :wk "Find File")
  ))

#+end_src

** Icons
Collection of icons use throughout the setup. Yeah uses both [[https://github.com/rainstormstudio/nerd-icons.el][nerd-icons]] and [[https://github.com/domtronn/all-the-icons.el][all-the-icons]].
#+begin_src emacs-lisp

  (use-package nerd-icons)
  (use-package all-the-icons)

#+end_src

** Mode-line
[[https://github.com/seagle0128/doom-modeline][Doom Modeline]], the best mode-line! Here I have removed some elements from the mode-line such as encoding format and percentage position.
#+begin_src emacs-lisp

  (use-package doom-modeline
    :hook
    (on-init-ui . doom-modeline-mode)
    :config
    (setq find-file-visit-truename t)
    (setq doom-modeline-icon t)
    (setq doom-modeline-buffer-encoding nil)
    (setq doom-modeline-percent-position nil)
    (setq doom-modeline-height 36))

  (use-package hide-mode-line :commands hide-mode-line-mode)

#+end_src

** Sane Defaults
Everything that you would typically expect when coming form other IDEs. This also includes some niceties that Emacs provides but not enabled by default.
#+begin_src emacs-lisp

  (use-package emacs
    :ensure nil
    :bind*
    (("C-?" . dictionary-lookup-definition))
    :hook
    (prog-mode . display-line-numbers-mode)
    (calendar-today-visible . calendar-mark-today)
    :init
    (electric-indent-mode -1)    ;; Disable weird emacs indenting
    (indent-tabs-mode -1)        ;; Disable the use of tabs for indentation
    (line-number-mode -1)        ;; Disable line number from showing in modline
    (xterm-mouse-mode 1)         ;; Enable mouse support in terminal mode.
    (file-name-shadow-mode 1)    ;; Enable shadowing of filenames for clarity.
    (electric-pair-mode 1)       ;; Enable pair parens
    (display-battery-mode 1)     ;; Enable displaying battery info in modline
    (winner-mode 1)              ;; Easily undo window configuration changes.
    :custom
    (dictionary-server "dict.org")        ;; set dictionary server
    (delete-selection-mode 1)             ;; Replacing selected text with typed text.
    (global-visual-line-mode 1)           ;; Better text wrapping
    (display-line-numbers-type 'relative) ;; Use relative line numbering
    (history-length 25)                   ;; Set the length of the command history.
    (ispell-dictionary "en_US")           ;; Default dictionary for spell checking.
    (ring-bell-function 'ignore)          ;; Disable the audible bell.
    (tab-width 4)                         ;; Set the tab width to 4 spaces.
    (use-dialog-box nil)                  ;; Disable dialog boxes
    (warning-minimum-level :error)        ;; Set the minimum level of warnings.
    (show-paren-context-when-offscreen t) ;; Show context of parens when offscreen

    ;; TAB key complete, instead of just indenting.
    (tab-always-indent 'complete)
    ;; Use advanced font locking for Treesit mode.
    (treesit-font-lock-level 4)
    ;; Offer to delete any autosave file when killing a buffer.
    (kill-buffer-delete-auto-save-files t)
    ;; Prevent automatic window splitting if the window width exceeds 300 pixels.
    (split-width-threshold 300)
    :config
    (add-hook 'before-save-hook 'delete-trailing-whitespace)
    (setq holiday-christian-holidays nil
          holiday-hebrew-holidays nil
          holiday-islamic-holidays nil
          holiday-bahai-holidays nil
          holiday-solar-holidays nil)
    (setq-default indent-tabs-mode nil))

  (use-package woman
    :ensure nil
    :hook
    (woman-mode . visual-fill-column-mode)
    :custom
    (woman-fill-frame t))

 #+end_src

** Session Preservation
*** Auto Save
Enable auto-saves of file related buffers conditionally (timeout/keystrokes).
#+begin_src emacs-lisp

  (setq auto-save-default t     ; auto-save every buffer that visits a file
        auto-save-timeout 20    ; number of seconds idle time before auto-save
        auto-save-interval 200  ; number of keystrokes between auto-saves

        ;; Do not auto-disable auto-save after deleting large chunks of text
        auto-save-include-big-deletions t)

  (setq auto-save-list-file-prefix
        (expand-file-name "autosave/" user-emacs-directory))
  (setq tramp-auto-save-directory
        (expand-file-name "tramp-autosave/" user-emacs-directory))

#+end_src

*** Auto revert
Auto-revert in Emacs is a feature that automatically updates the contents of a buffer to reflect changes made to the underlying file on disk.
#+begin_src emacs-lisp

  (global-auto-revert-mode 1)  ;; Keep buffers up to date with their files.
  (setq global-auto-revert-non-file-buffers t)   ;; Automatically refresh non-file buffers.
  (setq revert-without-query (list ".")  ; Do not prompt
        auto-revert-stop-on-user-input nil
        auto-revert-verbose t)

#+end_src

*** Backups
Here we are setting up the backup directory as well as making backups version controlled. Its not git version control, but a special Emacs way of keeping multiple backups of a file. We also enable auto saving of buffers.
#+begin_src emacs-lisp

  ;; setting the backup dir to trash.
  (let ((trash-dir (getenv "XDG_DATA_HOME")))
    (unless (and trash-dir (file-directory-p trash-dir))
      (setq trash-dir (expand-file-name "~/.local/share"))) ;; default fallback
    (setq backup-directory-alist `(("." . ,(concat trash-dir "/Trash/files")))))

  (setq make-backup-files t     ; backup of a file the first time it is saved.
        backup-by-copying t     ; don't clobber symlinks
        version-control t       ; version numbers for backup files
        delete-old-versions t   ; delete excess backup files silently
        kept-old-versions 6     ; oldest versions to keep when a new numbered
        kept-new-versions 9)    ; newest versions to keep when a new numbered

#+end_src

*** Save-place Mode
=save-place-mode= enables Emacs to remember the last location within a file upon reopening. This feature is particularly beneficial for resuming work at the precise point where you previously left off.
#+begin_src emacs-lisp

  (save-place-mode 1)
  (setq save-place-file (expand-file-name "saveplace" user-emacs-directory))
  (setq save-place-limit 600)

#+end_src

*** Save-hist Mode
=savehist= is an Emacs feature that preserves the mini-buffer history between sessions. It saves the history of inputs in the mini-buffer, such as commands, search strings, and other prompts, to a file. This allows users to retain their mini-buffer history across Emacs restarts.
#+begin_src emacs-lisp

  (setq savehist-additional-variables
        '(kill-ring
          command-history
          set-variable-value-history
          custom-variable-history
          query-replace-history
          read-expression-history
          minibuffer-history
          read-char-history
          face-name-history
          bookmark-history
          file-name-history))

  (setq history-length 300)
  (setq kill-ring-max 25)
  (put 'minibuffer-history         'history-length 50)
  (put 'file-name-history          'history-length 50)
  (put 'set-variable-value-history 'history-length 25)
  (put 'custom-variable-history    'history-length 25)
  (put 'query-replace-history      'history-length 25)
  (put 'read-expression-history    'history-length 25)
  (put 'read-char-history          'history-length 25)
  (put 'face-name-history          'history-length 25)
  (put 'bookmark-history           'history-length 25)
  (savehist-mode 1)

#+end_src

We remove text properties for kill ring entries so that the save-hist file doesn't get way too large. A large save-hist file slows down Emacs considerably. =substring-no-properties= removes any text properties from a given string. =kill-ring= is a list of strings; we're using =mapcar= to apply =substring-no-properties= to each string that is currently in the kill ring. The result of the =mapcar call= (i.e. a list of strings without any text properties) is used to override the original value of =kill-ring=. [[https://emacs.stackexchange.com/questions/4187/strip-text-properties-in-savehist][Source]]
#+begin_src emacs-lisp

  (defun unpropertize-kill-ring ()
    (setq kill-ring (mapcar 'substring-no-properties kill-ring)))
  (add-hook 'kill-emacs-hook 'unpropertize-kill-ring)

#+end_src

*** Recentf
=recentf= is an Emacs package that maintains a list of recently accessed files, making it easier to reopen files you have worked on recently.
#+begin_src emacs-lisp

  (setq recentf-max-menu-items 25)
  (recentf-mode 1)
  (setq recentf-max-saved-items 300) ; default is 20
  (setq recentf-auto-cleanup 'mode)

  (run-with-timer 60 (* 30 60) 'recentf-save-list)

#+end_src

** Theme
Using the catppuccin theme. Also customized the theme to fit my taste.
#+begin_src emacs-lisp

  (use-package catppuccin-theme
    :custom
    (catppuccin-highlight-matches t)
    (catppuccin-italic-comments t)
    (catppuccin-italic-variables t)
    :config
    (catppuccin-set-color 'base "#000000" 'mocha)
    (catppuccin-set-color 'mantle "#090909" 'mocha)
    (catppuccin-set-color 'crust "#181825" 'mocha)
    (catppuccin-set-color 'base "#FBF7F0" 'latte)
    (catppuccin-set-color 'mantle "#EFE9DD" 'latte)
    (catppuccin-set-color 'crust "#C9B9B0" 'latte)
    (load-theme 'catppuccin t)
    (nox/change-colors))
#+end_src

Visually separate UI elements for making the editing experience more pleasing.
#+begin_src emacs-lisp

  ;; adding padding to ui elements to make doing tasks feel more comfortable
  (use-package spacious-padding
    :after catppuccin-theme
    :config
    (setq spacious-padding-widths
          '( :internal-border-width 15
             :header-line-width 0
             :mode-line-width 0
             :tab-width 4
             :right-divider-width 0
             :scroll-bar-width 8
             :fringe-width 8))
    (if (daemonp)
        (add-hook 'server-after-make-frame-hook #'spacious-padding-mode)
      (spacious-padding-mode)))

  ;; Transparency
  (add-to-list 'default-frame-alist '(alpha-background . 80))

#+end_src

Function to change the colors throughout the UI when changing theme.
#+begin_src emacs-lisp

  (defun nox/diff-hl-update-colors ()
    "Change diff-hl colors."
    (interactive)

    (set-face-attribute 'diff-hl-change nil
                        :foreground (catppuccin-get-color 'yellow)
                        :background (catppuccin-get-color 'base))
    (set-face-attribute 'diff-hl-delete nil
                        :foreground (catppuccin-get-color 'red)
                        :background (catppuccin-get-color 'base))
    (set-face-attribute 'diff-hl-insert nil
                        :foreground (catppuccin-get-color 'green)
                        :background (catppuccin-get-color 'base)))

  (defun nox/change-colors ()
    "Change colors throughout."
    (interactive)

    (set-face-attribute 'highlight nil :foreground 'unspecified)

    (set-face-attribute 'mode-line nil :background 'unspecified)

    (set-face-attribute 'calendar-today nil
                        :underline 'unspecified
                        :foreground (catppuccin-get-color 'green))

    (set-face-attribute 'holiday nil
                        :background 'unspecified
                        :foreground (catppuccin-get-color 'red))

    (set-face-attribute 'mode-line-active nil :inherit 'mode-line)

    (nox/diff-hl-update-colors))


#+end_src

#+begin_src emacs-lisp

  (defun nox/toggle-catppuccin ()
    "Toggle the catppuccin theme between latte and mocha."
    (interactive)
    (let ((current-flavor catppuccin-flavor))
      (setq catppuccin-flavor (if (equal current-flavor 'latte) 'mocha 'latte))
      (catppuccin-reload)
      (nox/change-colors)
      (nox/org-font-setup)))

#+end_src

** Which Key
[[https://github.com/justbur/emacs-which-key][Whichkey]] helps showcase the available bindings. Not much to talk about it, it is a nice to have to discover new bindings or to quickly see what the bindings do. Whichkey comes built in to emacs starting =v30=.
#+begin_src emacs-lisp

  (use-package which-key
    :config (which-key-mode)
    :ensure nil
    :custom
    (which-key-side-window-location 'bottom)
    (which-key-sort-order #'which-key-key-order-alpha)
    (which-key-sort-uppercase-first nil)
    (which-key-add-column-padding 1)
    (which-key-max-display-columns nil)
    (which-key-min-display-lines 10)
    (which-key-side-window-slot -10)
    (which-key-side-window-max-height 0.25)
    (which-key-idle-delay 0.3)
    (which-key-max-description-length 25)
    (which-key-allow-imprecise-window-fit nil)
    (which-key-separator " → " ))

#+end_src

* Applications
** Avy
Jumping around in text has never been easier! Use the =s= key in normal mode to see what [[https://github.com/abo-abo/avy][avy]] is capable of. Here we also change the default text face when avy is activated to make it easier to see the jump places. I copied the =avy-jump-org-block= from [[https://www.howardabrams.com/hamacs/ha-org-literate.html][howard abrams]].
#+begin_src emacs-lisp

  (use-package avy
    :commands
    (evil-avy-goto-char-timer
     nox/avy-jump-org-block
     nox/avy-jump-to-link)
    :custom
    (avy-background t)
    :config
    (set-face-attribute 'avy-background-face nil
                        :foreground 'unspecified
                        :background 'unspecified
                        :inherit 'shadow))

#+end_src

#+begin_src emacs-lisp

  (defun nox/avy-jump-org-block ()
    "Jump to org block using Avy subsystem."
    (interactive)
    (avy-jump (rx line-start (zero-or-more blank) "#+begin_src")
              :action 'goto-char)
    ;; Jump _into_ the block:
    (forward-line))

  (defun nox/avy-jump-to-link ()
    "Jump to links using Avy subsystem."
    (interactive)
    (avy-jump (rx (or "http://" "https://")) :action 'goto-char))

#+end_src

** Browse URL
Here we customize the default behavior of when Emacs tries to open a web URL. As a sort of general case, here we have defined functions so that whenever you try to open a web URL, a new prompt is displayed asking whether to open a private Firefox tab for that URL.
#+begin_src emacs-lisp

  (defun nox/browse-url-maybe-privately (url &optional new-window)
    "Ask whether URL should be browsed in a private browsing window."
    (interactive "URL: ")
    (if (y-or-n-p "Private Browsing? ")
        (nox/browse-url-firefox-privately url)
      (browse-url-default-browser url new-window)))

  (defun nox/browse-url-firefox-privately (url &optional new-window)
    "Make firefox open URL in private-browsing window."
    (interactive (browse-url-interactive-arg "URL: "))
    (let ((process-environment (browse-url-process-environment)))
      (apply 'start-process
             (concat "firefox " url)
             nil
             browse-url-firefox-program
             (list "-private-window" url))))

  (defun nox/open-in-reddigg (url &optional new-window)
    "Open the provided url in reddigg"
    (reddigg-view-comments url))

  (defun nox/parse-readwise (url &optional new-window)
    "Extract, decode and open the save URL part from a given Readwise URL."
    (if (string-match "https://wise\\.readwise\\.io/save\\?url=\\(.*\\)" url)
        (nox/browse-url-maybe-privately (url-unhex-string (match-string 1 url)))
      (error "Invalid URL format")))

#+end_src

Now we setup rules for when to use the above defined functions. Here we have reddit for example where ~nox/open-in-reddigg~ is called whenever you try to open a URL matching the below described pattern for reddit.
#+begin_src emacs-lisp

  (setq browse-url-handlers
        '(("^https?://www\\.reddit\\.com" . nox/open-in-reddigg)
          ("^https?://arstechnica\\.com" . eww)
          ("^https?://wise\\.readwise\\.io/save\\?url=" . nox/parse-readwise)
          ("." . nox/browse-url-maybe-privately)))

  (setq browse-url-generic-program "firefox")

#+end_src

** Buffer Alist
#+begin_src emacs-lisp

  (setq display-buffer-alist
        '(("\\*Occur\\*"
           (display-buffer-reuse-mode-window)
           (display-buffer-below-selected)
           (dedicated . t)
           (window-height . fit-window-to-buffer))
          ))

#+end_src

** Buffer Commands
Run commands for specific buffer. The name of the buffer is enough to make the following work.
#+begin_src emacs-lisp

  (use-package bufferfile
    :ensure (:host github :repo "jamescherti/bufferfile.el")
    :custom (bufferfile-use-vc t)
    :commands (bufferfile-rename bufferfile-delete))

  (defun nox/run-commands-for-buffer-names ()
    "Run specific commands for certain buffer names."
    (let ((buffer-name (buffer-name)))
      (cond
       ((string-prefix-p "*ChatGPT" buffer-name)
        ;; make the window dedicated
        (set-window-dedicated-p (selected-window) t))

       ((string= buffer-name "*use-package statistics*")
        (hl-line-mode))

       ((string= buffer-name "*reddigg-comments*")
        (org-appear-mode -1)
        (evil-goto-first-line)
        ;; convert all md links to org links
        (nox/md-to-org-links)
        ;; make the window dedicated
        (set-window-dedicated-p (selected-window) t)
        ;; easier quitting of the window
        (evil-local-set-key 'normal "q" 'kill-current-buffer)
        ;; open all folds
        (org-fold-show-all)
        (read-only-mode))
       )))

  ;; Add the function to hooks
  (add-hook 'buffer-list-update-hook 'nox/run-commands-for-buffer-names)

#+end_src

** Buffer Terminator
The [[https://github.com/jamescherti/buffer-terminator.el][buffer-terminator]] package automatically and safely kills buffers, ensuring a clean and efficient workspace while enhancing the performance of Emacs by reducing open buffers, which minimizes active modes, timers, processes.
#+begin_src emacs-lisp

  (use-package buffer-terminator
    :hook
    (on-first-input . buffer-terminator-mode))

#+end_src

** Calibre
#+begin_src emacs-lisp

  (use-package calibredb
    :config
    (setq calibredb-root-dir "~/Documents/Dropbox/Books/")
    (setq calibredb-format-nerd-icons t)
    (setq calibredb-db-dir (expand-file-name "metadata.db" calibredb-root-dir)))

#+end_src

** Expand Region
[[https://github.com/magnars/expand-region.el][Expand region]] increases the selected region by semantic units. Just keep pressing the key until it selects what you want.
#+begin_src emacs-lisp

  ;; slow in org files, don't know the reason
  (use-package expand-region
    :bind ("C-=" . er/expand-region))

#+end_src

** Elfeed
[[https://github.com/skeeto/elfeed][Elfeed]] is a RSS reader for Emacs. Here, since elfeed doesn't have a hook for when displaying a feed item, we customize ~elfeed-show-entry-switch~ to make it work like a hook for this particular use-case.
#+begin_src emacs-lisp

  (use-package elfeed
    :commands elfeed
    :bind
    ([remap elfeed-search-fetch] . nox/elfeed-refresh)
    :custom
    (elfeed-search-filter "@1-weeks-ago +unread")
    :config
    (defun nox/elfeed-show (buff)
      (switch-to-buffer buff)
      (display-line-numbers-mode -1)
      (visual-fill-column-mode)
      (elfeed-show-refresh))
    (setq elfeed-show-entry-switch 'nox/elfeed-show))

#+end_src

*** Elfeed Protocol
#+begin_src emacs-lisp


  (use-package elfeed-protocol
    :custom
    (elfeed-use-curl t)
    (elfeed-curl-extra-arguments '("--insecure"))
    (elfeed-protocol-enabled-protocols '(fever))
    (elfeed-protocol-fever-update-unread-only t)
    (elfeed-protocol-fever-fetch-category-as-tag t)
    :config
    (elfeed-set-timeout 36000)
    (elfeed-protocol-enable)
    (defconst nox/freshrss-url (nox/get-secret "identity/freshrss/url"))

    (setq elfeed-protocol-feeds `((,(concat "fever+" nox/freshrss-url)
                                   :api-url
                                   ,(concat nox/freshrss-url "/api/fever.php")
                                   :password
                                   (nox/get-secret "identity/freshrss/pass"))))

    (defun nox/elfeed-refresh ()
      "Refresh elfeed feed along with unread state. Only use inside elfeed search."
      (interactive)
      (mark-whole-buffer)
      (cl-loop for entry in (elfeed-search-selected)
               do (elfeed-untag-1 entry 'unread))
      (elfeed-search-update--force)
      (elfeed-protocol-fever-reinit nox/freshrss-url)))

#+end_src

*** Elfeed Tube
[[https://github.com/karthink/elfeed-tube][Elfeed Tube]] improves the already outstanding [[#elfeed][elfeed]] to work even more seamlessly with YouTube. It adds thumbnail, transcript, mpv support and so much more to YouTube feeds.
#+begin_src emacs-lisp

  (use-package elfeed-tube
    :after elfeed
    :custom
    (elfeed-tube-auto-save-p t)
    (elfeed-tube-fields '(duration thumbnail captions chapters))
    :config
    (elfeed-tube-setup))

  (use-package elfeed-tube-mpv :after efleed-tube)

#+end_src

*** Reddigg
[[https://github.com/thanhvg/emacs-reddigg][Reddigg]] is an interface for Emacs to make viewing reddit inside Emacs more well integrated. It uses org mode to display the reddit feed, but here we mostly use it for its ability to show reddit comments as folded-up org headings.
#+begin_src emacs-lisp

  (use-package reddigg :commands reddigg-view-comments)

#+end_src

** EWW
The greatest text based browser to ever exist. /In my opinion!/ Here we are just trying to make it a little better.
#+begin_src emacs-lisp

  (add-hook 'eww-mode-hook (lambda ()
                             (display-line-numbers-mode -1)
                             (visual-fill-column-mode)))

#+end_src

** Gptel
The =gptel= package for Emacs is a client for OpenAI's GPT models, enabling users to interact with the AI directly within the Emacs environment. It provides a convenient interface for sending prompts and receiving responses, allowing for streamlined integration of AI-assisted writing and code generation.
#+begin_src emacs-lisp

    (use-package gptel
      :commands gptel
      :hook
      (gptel-mode . evil-insert-state)
      (gptel-post-stream . gptel-auto-scroll)
      (gptel-post-response-functions . gptel-end-of-response)
      :bind* (("C-c RET" . gptel-send))
      :custom
      (gptel-default-mode 'org-mode)
      (gptel-api-key (nox/get-secret "api/openai"))
      :config
      (gptel-make-perplexity "Perplexity"
        :key (nox/get-secret "api/perplexity")
        :stream t)
      (gptel-make-gemini "Gemini"
        :key (nox/get-secret "api/gemini")
        :stream t))

  ;; %s/\]\[/\] \[
  ;; %s/\[\([0-9]+\)\]/\[fn:\1\]/g

#+end_src


Quick looks and text summarizations using gptel.
#+begin_src emacs-lisp

  (use-package posframe :defer t)
  (use-package gptel-quick
    :ensure (:host github :repo "karthink/gptel-quick")
    :custom
    (gptel-quick-display 'posframe))

#+end_src

** Jinx
[[https://github.com/minad/jinx][Jinx]] is a fast just-in-time spell-checker for Emacs. Jinx highlights misspelled words in the text of the visible portion of the buffer. For efficiency, Jinx highlights misspellings lazily, recognizes window boundaries and text folding, if any.
#+begin_src emacs-lisp

  (use-package jinx
    :ensure nil
    :hook
    (on-first-input . global-jinx-mode)
    :bind* (("C-/" . jinx-correct)))

#+end_src

** Language Tool
#+begin_src emacs-lisp

  ;; (use-package langtool
  ;;   :config
  ;;   (setq langtool-http-server-host "localhost"
  ;;         langtool-http-server-port 8081))

#+end_src

** Mu4e
=Mu4e= is an email client for Emacs that integrates with the Mu email search engine. It allows users to manage and read email directly within Emacs, providing features like search capabilities, threading, and support for multiple mail folders. Mu4e is designed for efficiency and works well with large volumes of email, leveraging Mu's fast indexing. Users can compose, reply, and organize their emails while enjoying the extensibility and customizability of Emacs.
#+begin_src emacs-lisp

  ;; (use-package mu4e
  ;;   :ensure nil
  ;;   :defer 5
  ;;   :hook
  ;;   (mu4e-main-mode . visual-fill-column-mode)
  ;;   (mu4e-view-mode . visual-fill-column-mode)
  ;;   :config
  ;;   (mu4e t)
  ;;   (setq user-mail-address "adwait@adhk.dev")
  ;;   ;; This is set to 't' to avoid mail syncing issues when using mbsync
  ;;   (setq mu4e-change-filenames-when-moving t)
  ;;
  ;;   ;; Refresh mail using isync every 5 minutes
  ;;   (setq mu4e-update-interval (* 5 60))
  ;;   (setq mu4e-get-mail-command "mbsync -a")
  ;;   (setq mu4e-maildir "~/Mail/proton")
  ;;
  ;;   (setq mu4e-drafts-folder "/Drafts")
  ;;   (setq mu4e-sent-folder   "/Sent")
  ;;   (setq mu4e-refile-folder "/Archive")
  ;;   (setq mu4e-trash-folder  "/Trash")
  ;;
  ;;   ;; prefer text/plain when viewing mail
  ;;   (with-eval-after-load "mm-decode"
  ;;     (add-to-list 'mm-discouraged-alternatives "text/html")
  ;;     (add-to-list 'mm-discouraged-alternatives "text/richtext" t))
  ;;
  ;;   (setq mu4e-maildir-shortcuts
  ;;         '((:maildir "/Archive"                :key ?a)
  ;;           (:maildir "/Drafts"                 :key ?d)
  ;;           (:maildir "/Inbox"                  :key ?i)
  ;;           (:maildir "/Sent"                   :key ?s)
  ;;           (:maildir "/Folders/Wisdom Letters" :key ?w))))

#+end_src

** Obsidian
#+begin_src emacs-lisp

  (use-package obsidian
    :config
    (global-obsidian-mode t)
    (obsidian-backlinks-mode t)
    :custom
    ;; location of obsidian vault
    (obsidian-directory "~/Documents/Notes")
    ;; Default location for new notes from `obsidian-capture'
    (obsidian-inbox-directory "Inbox")
    ;; Useful if you're going to be using wiki links
    (markdown-enable-wiki-links t)
    (obsidian-daily-notes-directory "Logs")

    ;; These bindings are only suggestions; it's okay to use other bindings
    :bind (:map obsidian-mode-map
                ;; Create note
                ("C-c C-n" . obsidian-capture)
                ;; If you prefer you can use `obsidian-insert-wikilink'
                ("C-c C-l" . obsidian-insert-link)
                ;; Open file pointed to by link at point
                ("C-c C-o" . obsidian-follow-link-at-point)
                ;; Open a different note from vault
                ("C-c C-p" . obsidian-jump)
                ;; Follow a backlink for the current file
                ("C-c C-b" . obsidian-backlink-jump)))

#+end_src

** PDF Tools
Viewing PDF inside Emacs. The render is created on-demand and stored in memory. Installed through Nix OS. Here we set ~pdf-view-themed-minor-mode~ to make it more seamless with rest of Emacs. We also hide the cursor in evil normal mode inside ~pdf-view-mode~.
#+begin_src emacs-lisp

  (use-package pdf-tools
    :ensure nil
    :hook
    (pdf-view-mode . (lambda ()
                       (pdf-view-themed-minor-mode)
                       (set (make-local-variable 'evil-normal-state-cursor) (list nil))))
    :mode "\\.pdf\\'"
    :bind (:map pdf-view-mode-map
                ("j" . pdf-view-next-line-or-next-page)
                ("k" . pdf-view-previous-line-or-previous-page)
                ("C-=" . pdf-view-enlarge)
                ("C--" . pdf-view-shrink))
    :config
    (package-initialize)
    (pdf-tools-install)
    (add-to-list 'revert-without-query ".pdf"))

  (use-package org-pdftools
    :ensure nil
    :hook (org-mode . org-pdftools-setup-link))

#+end_src

** Popper
[[https://github.com/karthink/popper][Popper]] eliminates the clutter of buffer management by auto assigning certain buffers to a dedicated space which can be popped in and out of view.
#+begin_src emacs-lisp

  (use-package popper
    :hook
    (persp-mode . popper-mode)
    (popper-mode . popper-echo-mode)
    :bind* (("C-\\"   . popper-toggle)
            ("C-|"   . popper-cycle)
            ("C-M-\\" . popper-toggle-type))
    :custom
    (popper-group-function #'popper-group-by-perspective)
    (popper-mode-line "")
    (popper-window-height 20)
    (popper-reference-buffers
     '("\\*Messages\\*"
       "\\*Async Shell Command\\*"
       "^\\*eshell.*\\*$" eshell-mode
       "^\\*shell.*\\*$"  shell-mode
       "^\\*term.*\\*$"   term-mode
       "^\\*vterm.*\\*$"  vterm-mode
       "schedule.org"
       help-mode
       inferior-python-mode
       helpful-mode
       dictionary-mode
       elpaca-log-mode
       compilation-mode))
    (popper-echo-transform-function #'nox/popper-truncate-string)
    :config
    (defun nox/popper-truncate-string (str)
      "Truncate STR to 12 characters."
      (if (> (length str) 12)
          (substring str 0 12)
        str)))

#+end_src

** Ultra Scroll
[[https://github.com/jdtsmith/ultra-scroll][ultra-scroll]] is a smooth-scrolling package for Emacs. It provides highly optimized, pixel-precise smooth scrolling which can readily keep up with the very high event rates of modern track-pads and high-precision wheel mice.
#+begin_src emacs-lisp

  (use-package ultra-scroll
    :hook
    (on-init-ui . ultra-scroll-mode)
    :ensure (ultra-scroll  :host github :repo "jdtsmith/ultra-scroll")
    :init
    (setq scroll-conservatively 101
          pixel-scroll-precision-mode t
          scroll-margin 0))

#+end_src

** Uniline
[[https://github.com/tbanel/uniline][Uniline]] provides pure unicode text diagrams in Emacs.
#+begin_src emacs-lisp

  (use-package uniline :commands uniline-mode)

#+end_src

** Wombag
#+begin_src emacs-lisp

  (use-package wombag
    :ensure (:host github :repo "karthink/wombag")
    :commands (wombag wombag-sync)
    :hook (wombag-entry . visual-fill-column-mode)
    :config
    (setq wombag-host (concat "https://wallabag." (nox/get-secret "identity/url"))
          wombag-username (nox/get-secret "identity/wallabag/user")
          wombag-password (nox/get-secret "identity/wallabag/pass")
          wombag-client-id (nox/get-secret "identity/wallabag/id")
          wombag-client-secret (nox/get-secret "identity/wallabag/secret")))

#+end_src


* Buffer Management
Buffers are an integral part of any Emacs workflow. Here we customize it to make it more pleasing to work with.
** Ibuffer
Add icons to ibuffer as well as remove line numbers in ibuffer. Also disable ~visual-line-mode~ since we don't want text wrapping inside ibuffer.
#+begin_src emacs-lisp

  (use-package nerd-icons-ibuffer
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode))

  (use-package ibuffer
    :ensure nil
    :commands (ibuffer persp-ibuffer)
    :hook
    (ibuffer-mode . (lambda () (display-line-numbers-mode -1)))
    (ibuffer-mode . (lambda () (visual-line-mode -1))))

#+end_src

** Perspective
[[https://github.com/nex3/perspective-el][Perspective]] provides multiple named workspaces inside emacs. Its similar to how window managers do this. I have improved on this to make easier keybinds for switching my most used perspectives.
#+begin_src emacs-lisp

  (use-package perspective
    :commands
    (nox/restore-perspectives persp-state-load)
    :custom
    (persp-state-default-file "~/.local/share/persp-state")
    (persp-mode-prefix-key (kbd "C-c b"))
    (persp-modestring-short t)
    (persp-initial-frame-name "1 learn")
    (persp-modestring-dividers '("" "" ""))
    :config
    ;; auto save state every 2 mins
    (run-with-timer 120 (* 15 60) 'persp-state-save)
    (add-hook 'kill-emacs-hook #'persp-state-save))


#+end_src

I have also created a handy function which helps restore the saved perspectives in my workflow. This is a kind of hacky way of restoring perspectives as it doesn't handle if you use multiple emacs frames in your workflow.
#+begin_src emacs-lisp

  (defun nox/restore-perspectives ()
    "Restores the last saved perspective-state and deletes all other frames"
    (interactive)
    (persp-state-load persp-state-default-file)
    (delete-other-frames))

  ;; auto load state when opening the first client frame
  (when (daemonp)
    (add-hook 'server-after-make-frame-hook
              (lambda ()
                (unless (bound-and-true-p persp-mode)
                  (nox/restore-perspectives)))))

#+end_src

Easier switching of perspectives using simple bindings with follow vim motions keys.
#+begin_src emacs-lisp

  (with-eval-after-load 'evil
    (evil-define-key '(normal insert) 'global
      (kbd "C-S-h") '(lambda () (interactive) (persp-switch-by-number 1))
      (kbd "C-S-j") '(lambda () (interactive) (persp-switch-by-number 2))
      (kbd "C-S-k") '(lambda () (interactive) (persp-switch-by-number 3))
      (kbd "C-S-l") '(lambda () (interactive) (persp-switch-by-number 4))))

#+end_src

* Development
** Preview
Completion Preview displays a completion suggestion for the symbol at point in an overlay after point.
#+begin_src emacs-lisp

  (use-package completion-preview
    :ensure nil
    :hook
    ((comint-mode-hook
      eshell-mode-hook
      prog-mode-hook
      text-mode-hook) . completion-preview-mode)
    (minibuffer-setup. completion-preview-enable-in-minibuffer)
    :bind*
    (:map completion-preview-active-mode-map
          ("TAB" . completion-preview-complete)
          ("C-e" . completion-preview-insert))
    :init
    (setq completion-preview-adapt-background-color nil)
    (setq completion-preview-minimum-symbol-length 2)
    :config
    (defun completion-preview-enable-in-minibuffer ()
      "Enable Corfu completion in the minibuffer, e.g., `eval-expression'."
      (when (where-is-internal #'completion-at-point (list (current-local-map)))
        (completion-preview-mode 1)))

    (cl-pushnew 'org-self-insert-command completion-preview-commands :test #'equal))

#+end_src

** Completions
Using [[https://github.com/minad/corfu][corfu]] for completions. Corfu enhances in-buffer completion with a small completion popup. It is the minimalistic inbuffer completion counterpart of the [[#vertico][vertico]] minibuffer UI.
#+begin_src emacs-lisp

  (use-package corfu
    :hook
    (on-first-input . global-corfu-mode)
    (corfu-mode . corfu-indexed-mode)
    :commands
    (corfu-mode
     corfu-indexed-mode
     global-corfu-mode)
    :custom
    (corfu-bar-width 0)
    (corfu-cycle t)                 ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                  ;; Enable auto completion
    (corfu-auto-prefix 2)           ;; Enable auto completion
    (corfu-auto-delay 0.24)         ;; Enable auto completion
    (corfu-preview-current 'insert) ;; Disable current candidate preview
    (corfu-on-exact-match nil)      ;; Configure handling of exact matches
    (corfu-scroll-margin 5)         ;; Use scroll margin
    (corfu-quit-at-boundary 'separator)
    :bind
    (:map corfu-map
          ("M-SPC" . corfu-insert-separator))
    :config
    (add-to-list 'corfu--frame-parameters '(font . "CaskaydiaCove Nerd Font-14"))

    (set-face-attribute 'corfu-default nil :inherit 'org-block :background 'unspecified)

    (add-hook 'evil-insert-state-exit-hook #'corfu-quit)
    (global-corfu-mode))

#+end_src

Here we are adding icons to corfu.
#+begin_src emacs-lisp

  (use-package nerd-icons-corfu
    :after corfu
    :config
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

#+end_src

Here we are enabling ~corfu-history~. This allows sorting of completions by the frequency of their use.
#+begin_src emacs-lisp

  (use-package corfu-history
    :after (corfu savehist)
    :ensure nil
    :hook
    (corfu-mode . corfu-history-mode)
    :config
    (add-to-list 'savehist-additional-variables 'corfu-history))

#+end_src

Here we setup popup-info for the completion candidate.
#+begin_src emacs-lisp

  (use-package corfu-popupinfo
    :ensure nil
    :hook
    (corfu-mode . corfu-popupinfo-mode)
    :config
    ;; popup info delay
    (setq corfu-popupinfo-delay '(0.5 . 1.0)))

#+end_src

Changing emacs settings so that we remove commands that do not apply to the current mode. We also disable the ispell completion function.
#+begin_src emacs-lisp

  (use-package emacs
    :ensure nil
    :custom
    ;; Emacs 30 and newer: Disable Ispell completion function. As an alternative,
    ;; try `cape-dict'.
    (text-mode-ispell-word-completion nil)

    ;; Hide commands in M-x which do not apply to the current mode.  Corfu
    ;; commands are hidden, since they are not used via M-x. This setting is
    ;; useful beyond Corfu.
    (read-extended-command-predicate #'command-completion-default-include-p))

#+end_src

** Direnv
#+begin_src emacs-lisp

  (use-package direnv
    :hook
    (prog-mode . direnv-mode)
    :custom
    (direnv-use-faces-in-summary nil)
    (direnv-show-paths-in-summary nil)
    (direnv-always-show-summary nil))

#+end_src

** Formatters
Here we use [[https://github.com/radian-software/apheleia][apheleia]] for code formatting. Formats code asynchronously and only after ~after-save-hook~.
#+begin_src emacs-lisp

  (use-package apheleia
    :hook
    (prog-mode . apheleia-mode)
    :config
    (push '(nix-ts-mode . nixfmt) apheleia-mode-alist))

#+end_src

** Flycheck
#+begin_src emacs-lisp

  (use-package flycheck
    :hook
    (prog-mode . flycheck-mode)
    :custom
    (flycheck-python-flake8-executable "flake8"))

  (use-package flycheck-rust
    :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

  (use-package cargo
    :hook (rust-mode . cargo-minor-mode))

  ;; (use-package flycheck-overlay
  ;;   :ensure
  ;;   (:host github :repo "konrad1977/flycheck-overlay")
  ;;   :custom
  ;;   (flycheck-overlay-virtual-line-type 'curved-arrow))

#+end_src

** Eglot
#+begin_src emacs-lisp

  (use-package eglot)
  (use-package markdown-mode)
  ;; (use-package poly-org :after org)
  ;; (use-package polymode
  ;;   :after org
  ;;   :config
  ;;   (add-hook 'polymode-init-inner-hook
  ;;           (lambda ()
  ;;             (let* ((fix-pitch (face-attribute 'fixed-pitch :family))
  ;;                    (fix-font (face-attribute 'fixed-pitch :font))
  ;;                    (fix-height (face-attribute 'fixed-pitch :height))
  ;;                    (background (face-attribute 'org-block-begin-line :background))
  ;;                    (props `(:background ,background
  ;;                             :extend t
  ;;                             :height ,fix-height
  ;;                             :family ,fix-pitch
  ;;                             :font ,fix-font)))
  ;;               (oset pm/chunkmode adjust-face props)))))

#+end_src

** Language Specific
#+begin_src emacs-lisp

  (use-package nix-mode :mode "\\.nix\\'")
  (use-package nix-ts-mode
    :hook
    (nix-mode . nix-ts-mode)
    (nix-ts-mode . eglot-ensure))

  (use-package python-ts-mode
    :ensure nil :mode "\\.py\\'" :hook (python-ts-mode . eglot-ensure))

  (use-package rust-ts-mode
    :ensure nil :mode "\\.rs\\'" :hook (rust-ts-mode . eglot-ensure))

  (use-package c-ts-mode :ensure nil :mode "\\.c\\'" :hook (c-ts-mode . eglot-ensure))

#+end_src

** Ligatures
Pretty fontification.
#+begin_src emacs-lisp

  (use-package ligature
    :hook (on-first-input . global-ligature-mode)
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pith' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (ligature-set-ligatures '(prog-mode org-mode)
                            '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                              ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                              "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                              "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                              "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@"
                              "~=" "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "=>" "!="
                              "!!" ">:" "\\\\" "://" "..<" "</>" "###" "#_(" "<<<" "<+>"
                              ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                              "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                              "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                              "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                              "<--" "<-<" "<<=" "<<-")))

#+end_src

** Rainbow Delimiters
Add color coded delimiters. Also highlight any delimiters which is mismatched.
#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode)
    :config
    (setq rainbow-delimiters-max-face-count 5))

  (use-package rainbow-mode
    :hook
    (prog-mode . rainbow-mode))

#+end_src

** Projectile
Project management at its finest.
#+begin_src emacs-lisp

  (use-package projectile
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :config
    (projectile-mode))

#+end_src

** SOPS
#+begin_src emacs-lisp

  (use-package sops
    :config
    (global-sops-mode)
    :bind (("C-c C-c" . sops-save-file)
           ("C-c C-k" . sops-cancel)
           ("C-c C-d" . sops-edit-file)))

#+end_src

** Treesitter
Pretty syntax that I can look at all day long. This also allows a lot of niceties when moving around the code.
#+begin_src emacs-lisp

  (use-package treesit-auto
    :hook
    (on-first-file . global-treesit-auto-mode)
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all))

#+end_src

** Yasnippets
#+begin_src emacs-lisp

  (use-package yasnippet
    :hook
    (prog-mode . yas-minor-mode)
    (org-mode . yas-minor-mode)
    :custom
    (yas-snippet-dirs `(,(concat nox/emacs-directory "snippets"))))

#+end_src

* Dired
The best file manager to exist. Dired is a deep rabbithole that you can spend multiple hours going into. Here we have setup some nicities that will help you in your journey of learning the world of dired.
#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :hook
    ;; To hide dot-files by default
    (dired-mode . dired-omit-mode)
    :custom
    ;; hide files/directories starting with "." in dired-omit-mode
    (dired-omit-files (rx (seq bol ".")))
    ;; Enable "do what I mean" for target directories
    (dired-dwim-target t)

    ;; Close the previous buffer when opening a new `dired' instance
    (dired-kill-when-opening-new-dired-buffer t)
    :config
    (setq dired-free-space nil
          dired-deletion-confirmer 'y-or-n-p
          dired-clean-confirm-killing-deleted-buffers nil
          dired-recursive-deletes 'top
          dired-recursive-copies  'always
          dired-create-destination-dirs 'ask))


#+end_src

** Diredfl
Pretty colors inside dired.
#+begin_src emacs-lisp

  (use-package diredfl
    :hook
    ;;(dired-mode . diredfl-mode)
    ;; highlight parent and directory preview as well
    (dirvish-directory-view-mode . diredfl-mode)
    :config
    (set-face-attribute 'diredfl-dir-name nil :bold t))

#+end_src

** Dirvish
#+begin_src emacs-lisp

  (use-package dirvish
    :init
    (dirvish-override-dired-mode)
    :hook
    (dired-mode . (lambda () (visual-line-mode -1)))
    :custom
    (dirvish-quick-access-entries
     '(("h" "~/"                          "Home")
       ("D" "~/Documents/"                "Documents")
       ("n" "~/Documents/notes/"          "Notes")
       ("d" "~/Downloads/"                "Downloads")
       ("t" "~/.local/share/Trash/files/" "TrashCan")))
    (dired-listing-switches
     "-l --almost-all --human-readable --group-directories-first --no-group")
    (delete-by-moving-to-trash t)
    (dirvish-mode-line-format
     '(:left (sort symlink) :right (omit yank index)))
    (dirvish-attributes
     '(nerd-icons file-time file-size collapse subtree-state vc-state git-msg))
    (dirvish-side-attributes
     '(vc-state file-size nerd-icons collapse))
    (dirvish-use-header-line 'global)     ; make header line span all panes
    (dirvish-mode-line-bar-image-width 0) ; hide the leading bar image
    (dirvish-reuse-session 'open)
    :config
    (evil-define-key 'normal dired-mode-map
      (kbd "h") 'dired-up-directory
      (kbd "l") 'dired-find-file)

    (evil-define-key 'normal dirvish-mode-map
      (kbd "?") 'dirvish-dispatch
      (kbd "a") 'dirvish-quick-access
      (kbd "TAB") 'dirvish-subtree-toggle
      (kbd "q") 'dirvish-quit)

    (dirvish-side-follow-mode))     ; similar to `treemacs-follow-mode'

  (use-package dirvish-emerge
    :commands (dirvish-emerge-mode)
    :ensure nil
    :config
    (setq dirvish-emerge-groups
          ;; Header string |    Type    |    Criterias
          '(("Recent files"  (predicate . recent-files-2h))
            ("Documents"     (extensions "pdf" "tex" "bib" "epub"))
            ("Text"          (extensions "md" "org" "txt"))
            ("Video"         (extensions "mp4" "mkv" "webm"))
            ("Pictures"      (extensions "jpg" "png" "svg" "gif"))
            ("Audio"         (extensions "mp3" "flac" "wav" "ape" "aac"))
            ("Archives"      (extensions "gz" "rar" "zip"))))
    )

#+end_src

** Dired Open
Opening specific files with specific programs.
#+begin_src emacs-lisp

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    (setq dired-open-extensions '(("gif" . "imv")
                                  ("jpg" . "imv")
                                  ("webp" . "imv")
                                  ("png" . "imv")
                                  ("mkv" . "mpv")
                                  ("mp4" . "mpv"))))

#+end_src

** Peep Dired
File previews in dired.
#+begin_src emacs-lisp

  ;; (use-package peep-dired
  ;;   :commands (dired dired-jump)
  ;;   :config
  ;;   (evil-define-key 'nil peep-dired-mode-map
  ;;     (kbd "j") 'peep-dired-next-file
  ;;     (kbd "k") 'peep-dired-prev-file))

#+end_src

* Fonts
** Setting Font Faces
Here we setup the default font faces for =variable-pitch= as well as =fixed-pitch=. Throughout emacs we mostly use =fixed-pitch= but enable =variable-pitch= where deemed necessary like in org files.
#+begin_src emacs-lisp

  (set-face-attribute 'variable-pitch nil
                      :family "Inter"
                      :height 140
                      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
                      :family "CaskaydiaCove Nerd Font"
                      :height 140
                      :weight 'medium)

  (set-face-attribute 'default nil :inherit 'fixed-pitch)
  (set-face-attribute 'fixed-pitch-serif nil
                      :inherit 'fixed-pitch
                      :family 'unspecified)

  (defun nox/set-fonts ()
    "Set fonts and face attributes."
    ;; setting the emoji font family
    ;; https://emacs.stackexchange.com/a/80186
    (set-fontset-font t 'emoji
                      '("Apple Color Emoji" . "iso10646-1") nil 'prepend)


    ;; italic comments and keywords
    (set-face-attribute 'font-lock-comment-face nil
                        :italic t))
  (if (daemonp)
      (add-hook 'server-after-make-frame-hook #'nox/set-fonts)
    (nox/set-fonts))

  ;; setting the line spacing
  (setq-default line-spacing 0.16)

#+end_src

This sets the default font on all graphical frames created after restarting Emacs. Does the same thing as ~set-face-attribute default~ above, but emacsclient fonts are not right unless I also add this method of setting the default font.
#+begin_src emacs-lisp

  (add-to-list 'default-frame-alist '(font . "CaskaydiaCove Nerd Font-14"))

#+end_src

** Zooming In/Out
Binding CTRL plus +/- for zooming in/out.
#+begin_src emacs-lisp

  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)

#+end_src

* Git
** Diff HL
[[https://github.com/dgutov/diff-hl][Diff-hl]] highlights uncommitted changes on the left side of the window area also known as the =gutter=, allowing you to jump between and revert them selectively. In buffers controlled by git, you can also stage and unstage the changes.
#+begin_src emacs-lisp

  (use-package diff-hl
    :hook
    (on-first-input . global-diff-hl-mode)
    :commands
    (diff-hl-stage-current-hunk
     diff-hl-revert-hunk
     diff-hl-next-hunk
     diff-hl-previous-hunk)
    :custom
    ;; Set the side for diff indicators.
    (diff-hl-side 'left)
    ;; Customize symbols for each change type.
    (diff-hl-margin-symbols-alist '((insert . "│")
                                    (delete . "│")
                                    (change . "│")
                                    (unknown . "?")
                                    (ignored . "i")))
    (diff-hl-show-staged-changes nil)
    :config
    (nox/diff-hl-update-colors)
    ;; implements highlighting changes on the fly.
    (diff-hl-flydiff-mode 1)
    ;; changes the highlighting function to use the margin instead of the fringe.
    (diff-hl-margin-mode 1))

#+end_src

** Magit
=From the readme:= [[https://github.com/magit/magit][Magit]] is an interface to the version control system =Git=, implemented as an =Emacs= package. Magit aspires to be a complete =Git porcelain=. While we cannot ~yet~ claim that Magit wraps and improves upon each and every Git command, it is complete enough to allow even experienced Git users to perform almost all of their daily version control tasks directly from within Emacs. While many fine Git clients exist, only Magit and Git itself deserve to be called porcelains.
#+begin_src emacs-lisp

  (use-package transient)
  (use-package magit
    :commands magit-status
    :hook
    (magit-pre-refresh . diff-hl-magit-pre-refresh)
    (magit-post-refresh . diff-hl-magit-post-refresh)
    :config
    (setopt magit-format-file-function #'magit-format-file-nerd-icons))

#+end_src

* Helpful
Better help pages.
#+begin_src emacs-lisp

  (use-package helpful
    :commands
    (helpful-callable helpful-variable helpful-key helpful-command helpful-at-point)
    :hook
    (helpful-mode . (lambda ()
                      (set-window-dedicated-p (selected-window) t)))
    :custom
    (helpful-max-buffers 2)
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key)
    ([remap describe-variable] . helpful-variable)
    ([remap view-hello-file] . helpful-at-point))

#+end_src

* Minibuffer Completion
** Consult
Consult provides powerful completion and narrowing commands for Emacs. It integrates well with other completion frameworks like [[#vertico][vertico]], enabling features like previews and enhanced register management. It's useful for navigating buffers, files, and xrefs with ease.
#+begin_src emacs-lisp
  (use-package consult
    :bind
    ([remap bookmark-jump] . consult-bookmark)
    :commands
    (consult-ripgrep
     consult-buffer
     consult-imenu
     consult-mode-command
     consult-yank-from-kill-ring)
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :config
    ;; persp with consult
    (with-eval-after-load 'perspective
      (consult-customize consult--source-buffer :hidden t :default nil)
      (add-to-list 'consult-buffer-sources 'persp-consult-source))

    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    (setq consult-narrow-key "."))

#+end_src

** Embark
Embark provides a powerful contextual action menu for Emacs, allowing you to perform various operations on completion candidates and other items. It extends the capabilities of completion frameworks by offering direct actions on the candidates. Just =C-'= over any text, explore it.
#+begin_src emacs-lisp

  (use-package embark
    ;; using bind* to override other bindings
    :bind*
    (("C-'" . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    :custom
    ;; Optionally replace the key help with a completing-read interface
    (prefix-help-command #'embark-prefix-help-command)
    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

#+end_src

** Extended Settings
#+begin_src emacs-lisp

  (use-package emacs
    :ensure nil
    :custom
    ;; Hide commands in M-x which do not work in the current mode.  Vertico
    ;; commands are hidden in normal buffers. This setting is useful beyond
    ;; Vertico.
    (read-extended-command-predicate #'command-completion-default-include-p)
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode))

#+end_src

** Icons
#+begin_src emacs-lisp

  (use-package nerd-icons-completion
    :after (:all nerd-icons marginalia)
    :hook
    (marginalia-mode . nerd-icons-completion-marginalia-setup)
    :config
    (nerd-icons-completion-mode))

#+end_src

** Marginalia
Marginalia enhances the completion experience in Emacs by adding additional context to the completion candidates. This includes helpful annotations such as documentation and other relevant information, making it easier to choose the right option.
#+begin_src emacs-lisp

  (use-package marginalia
    :after vertico
    :config
    (marginalia-mode))

#+end_src

** Oderless
Orderless enhances completion in Emacs by allowing flexible pattern matching. It works seamlessly with [[#vertico][vertico]], enabling you to use partial strings and regular expressions to find files, buffers, and commands more efficiently. This combination provides a powerful and customizable completion experience.
#+begin_src emacs-lisp

  (use-package orderless
    :after vertico
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion))))
    (orderless-matching-styles
     '(orderless-literal
       orderless-prefixes
       orderless-initialism
       orderless-regexp
       orderless-flex
       ;; orderless-strict-leading-initialism
       ;; orderless-strict-initialism
       ;; orderless-strict-full-initialism
       ;; orderless-without-literal          ; Recommended for dispatches instead
       )))

#+end_src

** Vertico
Vertico enhances the completion experience in Emacs by providing a vertical selection interface for both buffer and minibuffer completions. Unlike traditional minibuffer completion, which displays candidates
in a horizontal format, Vertico presents candidates in a vertical list, making it easier to browse and select from multiple options.

In buffer completion, =switch-to-buffer= allows you to select from open buffers. Vertico streamlines this process by displaying the buffer list in a way that improves visibility and accessibility. This is particularly useful when you have many buffers open, allowing you to quickly find the one you need.

In minibuffer completion, such as when entering commands or file paths, Vertico helps by showing a dynamic list of potential completions, making it easier to choose the correct one without typing out the entire string.
#+begin_src emacs-lisp

  (use-package compat :after vertico)
  (use-package vertico
    :hook
    (on-first-input . vertico-mode)
    :custom
    (vertico-count 13)
    (vertico-resize t)
    (vertico-cycle t)
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("M-<return>" . vertico-exit-input)
                ("ESC" . vertico-exit))
    :config
    ;; Add » before the selected completion.
    (advice-add #'vertico--format-candidate :around
                (lambda (orig cand prefix suffix index _start)
                  (setq cand (funcall orig cand prefix suffix index _start))
                  (concat
                   (if (= vertico--index index)
                       (propertize "» " 'face 'vertico-current)
                     "  ")
                   cand))))

  ;; Configure directory extension.
  (use-package vertico-directory
    :after vertico
    :ensure nil
    ;; More convenient directory navigation commands
    :bind (:map vertico-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src


* Org Mode
Org-mode is a powerful system for organizing and managing your notes, tasks, and documents in plain text. It offers features like task management, outlining, scheduling, and much more, making it a versatile tool for productivity.

** Custom Functions
#+begin_src emacs-lisp

  (defun nox/org-screenshot ()
    "Take a screenshot into a time-stamped unique-named file in the
            images folder and insert a link to this file with a relative path."
    (interactive)
    (let* ((images-dir (expand-file-name "images" default-directory))
           (filename (concat (make-temp-name
                              (concat images-dir "/"
                                      (file-name-nondirectory
                                       (file-name-sans-extension buffer-file-name))
                                      "_"))
                             ".png")))
      (unless (file-exists-p images-dir)
        (make-directory images-dir t))
      (call-process "scp" nil nil nil filename)
      (insert (concat "[[./images/" (file-name-nondirectory filename) "]]"))
      (org-link-preview-region)))

#+end_src

** Better Fonts
#+begin_src emacs-lisp

  (defun nox/org-font-setup ()
    "Ensure that anything that should be fixed-pitch in Org files appears that way"
    (interactive)
    (set-face-attribute 'org-block-begin-line nil
                        :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-block-end-line nil
                        :inherit '(org-block-begin-line))
    (set-face-attribute 'org-meta-line nil
                        :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-document-info-keyword nil
                        :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-special-keyword nil
                        :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-code nil
                        :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-cite nil
                        :underline nil)

    (set-face-attribute 'org-block nil
                        :foreground 'unspecified)

    (set-face-attribute 'org-verbatim nil
                        :inherit 'variable-pitch)

    (set-face-attribute 'line-number-current-line nil
                        :inherit 'fixed-pitch)
    (set-face-attribute 'org-block nil
                        :inherit 'fixed-pitch)

    (set-face-attribute 'font-lock-string-face nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table    nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula  nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number  nil :inherit 'fixed-pitch)

    ;; disable large title
    (set-face-attribute 'org-document-title nil :height 'unspecified))

#+end_src

** Settings
Making org mode more akin to my linking.
#+begin_src emacs-lisp

  ;; Using RETURN to follow links in Org/Evil
  ;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link t) will not work
  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil))

  ;; Setting RETURN key in org-mode to follow links
  (setq org-return-follows-link  t)
  (use-package org
    :ensure `(org :repo "https://code.tecosaur.net/tec/org-mode.git/"
                  :branch "dev")
    :defer t
    :hook
    (org-mode . org-indent-mode)
    (org-mode . prettify-symbols-mode)
    (org-mode . (lambda () (display-line-numbers-mode -1)))
    (org-mode . visual-line-mode)
    (org-mode . variable-pitch-mode)
    (org-num-mode . nox/org-mode-hide-stars)
    (org-capture-mode . evil-insert-state)
    :custom
    (org-directory nox/notes-directory)
    (org-M-RET-may-split-line nil)
    (org-startup-with-latex-preview t)
    (org-attach-id-dir "attachments/")
    (org-attach-use-inheritance t)
    (org-attach-method 'mv)
    (org-startup-with-link-previews t)
    (org-image-align 'center)
    (org-image-actual-width nil)
    (org-fontify-quote-and-verse-blocks t)
    (org-support-shift-select t)
    (org-hide-emphasis-markers t)
    (org-hide-leading-stars t)
    :config
    (require 'docx-to-org)
    (nox/org-font-setup))

#+end_src

** Denote
#+begin_src emacs-lisp

  (use-package denote-journal
    :ensure (:host github :repo "protesilaos/denote-journal")
    :custom
    (denote-journal-title-format 'day-date-month-year)
    :config

    (setq org-refile-targets
          (mapcar (lambda (file)
                    (cons file '(:maxlevel . 2)))
                  (directory-files-recursively org-directory "\\.org$")))

    (with-eval-after-load 'org-capture
      (add-to-list 'org-capture-templates
                   '("j" "Journal" entry
                     (file denote-journal-path-to-new-or-existing-entry)
                     "* %U %?\n%i\n%a"
                     :kill-buffer t
                     :empty-lines 1))))

  (use-package denote
    :hook
    (dired-mode . denote-dired-mode)
    :config
    (with-eval-after-load 'org-capture
      (add-to-list 'org-capture-templates
                   '("N" "New stub note (Denote)" plain
                     (file denote-last-path)
                     #'denote-org-capture
                     :no-save t
                     :immediate-finish t
                     :kill-buffer t))

      (add-to-list 'org-capture-templates
                   '("n" "New note (Denote)" plain
                     (file denote-last-path)
                     #'denote-org-capture
                     :no-save t
                     :immediate-finish nil
                     :kill-buffer t))))

  (use-package consult-denote :after denote :config (consult-denote-mode))

  (use-package denote-explore :after denote)

#+end_src

** Org Agenda
#+begin_src emacs-lisp

  (use-package org-agenda
    :ensure nil
    :after org
    :custom
    (org-agenda-files `(,nox/schedule-file))
    (org-agenda-start-on-weekday 0)
    (org-agenda-skip-scheduled-if-done t)
    (org-agenda-skip-deadline-if-done t)
    (org-agenda-weekend-days '(6)))

#+end_src

** Org Download
#+begin_src emacs-lisp

  (use-package org-download
    :commands (org-download-clipboard org-download-screenshot)
    :custom
    (org-download-image-org-width 700)
    (org-download-screenshot-method "grim -g \"$(slurp -w 0 -b \"#fab38733\")\" %s")
    (org-download-method 'attach))

#+end_src

** Org Latex
#+begin_src emacs-lisp

  (use-package org-latex-preview
    :ensure nil
    :after org
    :hook
    (org-mode . org-latex-preview-auto-mode)
    :custom
    ;; Enable consistent equation numbering
    (org-latex-preview-numbered t)
    ;; org latex live preview
    (org-latex-preview-live t)
    ;; More immediate live-previews -- the default delay is 1 second
    (org-latex-preview-live-debounce 0.25)
    :config
    ;; Increase preview width
    (plist-put org-latex-preview-appearance-options
               :page-width 0.8)
    (plist-put org-latex-preview-appearance-options
               :scale 2)

    ;; Block C-n, C-p etc from opening up previews when using auto-mode
    (setq org-latex-preview-auto-ignored-commands
          '(next-line previous-line mwheel-scroll
                      scroll-up-command scroll-down-command))

    ;; code for centering LaTeX previews
    (defun nox/org-latex-preview-uncenter (ov)
      (overlay-put ov 'before-string nil))
    (defun nox/org-latex-preview-recenter (ov)
      (overlay-put ov 'before-string (overlay-get ov 'justify)))
    (defun nox/org-latex-preview-center (ov)
      (save-excursion
        (goto-char (overlay-start ov))
        (when-let* ((elem (org-element-context))
                    ((or (eq (org-element-type elem) 'latex-environment)
                         (string-match-p "^\\\\\\[" (org-element-property :value elem))))
                    (img (overlay-get ov 'display))
                    (prop `(space :align-to (- center (0.55 . ,img))))
                    (justify (propertize " " 'display prop 'face 'default)))
          (overlay-put ov 'justify justify)
          (overlay-put ov 'before-string (overlay-get ov 'justify)))))

    (define-minor-mode org-latex-preview-center-mode
      "Center equations previewed with `org-latex-preview'."
      :global nil
      (if org-latex-preview-center-mode
          (progn
            (add-hook 'org-latex-preview-overlay-open-functions
                      #'nox/org-latex-preview-uncenter nil :local)
            (add-hook 'org-latex-preview-overlay-close-functions
                      #'nox/org-latex-preview-recenter nil :local)
            (add-hook 'org-latex-preview-overlay-update-functions
                      #'nox/org-latex-preview-center nil :local))
        (remove-hook 'org-latex-preview-overlay-close-functions
                     #'nox/org-latex-preview-recenter)
        (remove-hook 'org-latex-preview-overlay-update-functions
                     #'nox/org-latex-preview-center)
        (remove-hook 'org-latex-preview-overlay-open-functions
                     #'nox/org-latex-preview-uncenter))))

#+end_src

** Org Protocol
#+begin_src emacs-lisp

  (use-package org-protocol
    :ensure nil
    :after org)

#+end_src

** Org Superstar
#+begin_src emacs-lisp

  (use-package org-superstar
    :commands (org-superstar-mode)
    :hook
    (org-mode . org-superstar-mode)
    :custom
    (org-superstar-headline-bullets-list
     '("◉" "◈" "○" "▷"))
    ;; Stop cycling bullets to emphasize hierarchy of headlines.
    (org-superstar-cycle-headline-bullets nil)
    ;; Hide away leading stars on terminal.
    (org-superstar-leading-bullet nil)
    ;; 42 -> *
    ;; 43 -> +
    ;; 45 -> -
    (org-superstar-item-bullet-alist '((42 . 8226) (43 . 10148) (45 . 8226)))
    :config
    (set-face-attribute 'org-superstar-leading nil :height 1.3)
    (set-face-attribute 'org-superstar-header-bullet nil
                        :height 1.2
                        :inherit 'fixed-pitch)
    (set-face-attribute 'org-superstar-item nil :height 1.2))

#+end_src

** Org Todoist
#+begin_src emacs-lisp

  (use-package org-todoist
    :after org
    :ensure (:host github
                   :repo "lillenne/org-todoist"
                   :branch "main"
                   :files ("org-todoist.el"))
    :config
    (add-to-list 'org-capture-templates
                 '("i" "Inbox (Todoist)" entry
                   (file+olp nox/schedule-file
                             "Inbox"
                             "Default Section")
                   "* TODO %?"))
    (add-to-list 'org-capture-templates
                 '("s" "Scheduled Task (Todoist)" entry
                   (function org-todoist-find-project-and-section)
                   "* TODO %^{What is the task} %^G %(progn (org-schedule nil) nil)\n%?"))

    (run-with-timer 60 (* 15 60) 'org-todoist-background-sync)
    (setq org-todoist-file nox/schedule-file)
    (setq org-todoist-infer-project-for-capture nil)
    (setq org-todoist-api-token (nox/get-secret "api/todoist")))

#+end_src

** Prettify Symbols
#+begin_src emacs-lisp

  (setq-default prettify-symbols-alist
                '(("#+begin_src emacs-lisp" . "")
                  ("#+begin_src nix" . "")
                  (":ATTACH:" . "🔗")
                  ("#+begin_src" . "»")
                  ("#+end_src" . "«")
                  ("#+begin_quote" . "")
                  ("#+end_quote" . "")
                  ("#+RESULTS:" . "󰥤")
                  (":tangle" . "󰯊")
                  (":mkdirp yes" . "")
                  ("lambda" . "λ")
                  ("(interactive)" . "")))

  (setq prettify-symbols-unprettify-at-point 'right-edge)

#+end_src


** Small Utilities
Add a table of content to org mode files. For this you just need to add a level one heading with :toc: tag.
#+begin_src emacs-lisp

  (use-package toc-org
      :hook (org-mode . toc-org-enable))

#+end_src

Make editing of links and any other hidden emphasis markers easy.
#+begin_src emacs-lisp

  (use-package org-appear
    :hook (org-mode . org-appear-mode)
    :custom (org-appear-autolinks t))

#+end_src

Enable auto tangling of org files. For this to work you need to set a new option to the file namely ~#+autotangle: t~.
#+begin_src emacs-lisp

  (use-package org-auto-tangle
    :hook (org-mode . org-auto-tangle-mode))

#+end_src

For better, faster and easier src blocks and other kinds of blocks.
#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("go" . "src go"))
    (add-to-list 'org-structure-template-alist '("nix" . "src nix"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))

    ;; turn off < auto pairing inside org-mode
    (add-hook 'org-mode-hook (lambda ()
                               (setq-local electric-pair-inhibit-predicate
                                           `(lambda (c)
                                              (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c)))))))

#+end_src

Setting languages for org babel
#+begin_src emacs-lisp

  (use-package org-babel
    :defer t
    :ensure nil
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((C . t)
       (python . t))))

#+end_src

** SVG Tags
#+begin_src emacs-lisp

  (use-package svg-tag-mode
    :after org
    :hook
    (org-mode . svg-tag-mode)
    :custom
    (svg-tag-action-at-point 'edit)
    :config
    (set-face-attribute 'svg-tag-default-face nil :inherit 'fixed-pitch)
    (defconst date-re "[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}")
    (defconst time-re "[0-9]\\{2\\}:[0-9]\\{2\\}")
    (defconst day-re "[A-Za-z]\\{3\\}")
    (defconst day-time-re (format "\\(%s\\)? ?\\(%s\\)?" day-re time-re))

    (setq svg-tag-tags
          `(
            ;; footnote in form [fn:1]
            ("\\(\\[fn:\\)" .
             ((lambda (tag) (svg-tag-make tag  :inverse t :beg 1 :end -1 :crop-right t ))))
            ("\\[fn:\\([0-9]+\\]\\)" .
             ((lambda (tag) (svg-tag-make tag  :end -1 :crop-left t ))))

            ;; Citation of the form [cite:@Knuth:1984]
            ("\\(\\[cite:@[A-Za-z]+:\\)" .
             ((lambda (tag) (svg-tag-make tag  :inverse t
                                          :beg 7 :end -1
                                          :crop-right t))))

            ("\\[cite:@[A-Za-z]+:\\([0-9]+\\]\\)" .
             ((lambda (tag) (svg-tag-make tag  :end -1
                                          :crop-left t))))

            ;; Active date (with or without day name, with or without time)
            (,(format "\\(<%s>\\)" date-re) .
             ((lambda (tag) (svg-tag-make tag  :beg 1
                                          :end -1
                                          :margin 0))))
            (,(format "\\(<%s \\)%s>" date-re day-time-re) .
             ((lambda (tag) (svg-tag-make tag  :beg 1
                                          :inverse nil
                                          :crop-right t
                                          :margin 0))))
            (,(format "<%s \\(%s>\\)" date-re day-time-re) .
             ((lambda (tag) (svg-tag-make tag  :end -1
                                          :inverse t
                                          :crop-left t
                                          :margin 0))))

            ;; Inactive date  (with or without day name, with or without time)
            (,(format "\\(\\[%s\\]\\)" date-re) .
             ((lambda (tag) (svg-tag-make tag  :beg 1
                                          :end -1
                                          :margin 0
                                          :face 'org-date))))
            (,(format "\\(\\[%s \\)%s\\]" date-re day-time-re) .
             ((lambda (tag) (svg-tag-make tag  :beg 1
                                          :inverse nil
                                          :crop-right t
                                          :margin 0
                                          :face 'org-date))))
            (,(format "\\[%s \\(%s\\]\\)" date-re day-time-re) .
             ((lambda (tag) (svg-tag-make tag  :end -1
                                          :inverse t
                                          :crop-left t
                                          :margin 0
                                          :face 'org-date))))

            ;; Todos
            ("TODO" .
             ((lambda (tag) (svg-tag-make "TODO"
                                          :face
                                          `(:foreground ,(catppuccin-get-color 'peach))
                                          :inverse t
                                          :margin 0))))
            ("READ" .
             ((lambda (tag) (svg-tag-make "READ"
                                          :face
                                          `(:foreground ,(catppuccin-get-color 'rosewater))
                                          :inverse t
                                          :margin 0))))
            ("PLAN" .
             ((lambda (tag) (svg-tag-make "PLAN"
                                          :face
                                          `(:foreground ,(catppuccin-get-color 'maroon))
                                          :inverse t
                                          :margin 0))))
            ("PROG" .
             ((lambda (tag) (svg-tag-make "PROG"
                                          :face
                                          `(:foreground ,(catppuccin-get-color 'teal))
                                          :inverse t
                                          :margin 0))))
            ("WAIT" .
             ((lambda (tag) (svg-tag-make "WAIT"
                                          :face
                                          `(:foreground ,(catppuccin-get-color 'red))
                                          :inverse t
                                          :margin 0))))
            ("DONE" .
             ((lambda (tag) (svg-tag-make "DONE"
                                          :face
                                          `(:foreground ,(catppuccin-get-color 'green))
                                          :inverse t
                                          :margin 0))))
            ("CANC" .
             ((lambda (tag) (svg-tag-make "CANC"
                                          :face
                                          `(:foreground
                                           ,(catppuccin-get-color 'overlay0))
                                          :inverse t
                                          :margin 0)))))))

#+end_src

** Visual Fill Column
Centering org documents for easier editing experience.
#+begin_src emacs-lisp

  (use-package visual-fill-column
    :hook
    (org-mode . visual-fill-column-mode)
    (org-agenda-mode . visual-fill-column-mode)
    (calendar-mode . visual-fill-column-mode)
    :custom
    (visual-fill-column-width 100)
    (visual-fill-column-center-text t))

#+end_src


* Shells & Terminals
** Eshell
#+begin_src emacs-lisp

  (use-package eshell
    :commands eshell
    :ensure nil
    :config
    (setq eshell-rc-script (concat nox/emacs-directory "eshell/profile")
          eshell-aliases-file (concat nox/emacs-directory "eshell/aliases")
          eshell-history-size 5000
          eshell-buffer-maximum-lines 5000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t
          eshell-destroy-buffer-when-process-dies t
          eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))

    (add-hook 'eshell-mode-hook (lambda ()
                                  (hide-mode-line-mode))))

#+end_src

#+begin_src eshell-alias :tangle eshell/aliases :mkdirp yes

  alias cls clear 1
  alias e 'find-file $1'

#+end_src

** Vterm
#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :hook
    (vterm-mode . (lambda () (display-line-numbers-mode -1)))
    (vterm-mode . hide-mode-line-mode)
    :custom
    (vterm-shell "/run/current-system/sw/bin/zsh"))

#+end_src

* Undo
** Undo Fu
[[https://github.com/emacsmirror/undo-fu][Undo Fu]] is a light weight wrapper for Emacs built-in undo system, adding convenient undo/redo without losing access to the full undo history, allowing you to visit all previous states of the document if you need. Here we also increase the default undo limit from =0.15mb= to the following mentioned values.
#+begin_src emacs-lisp

  (use-package undo-fu
    :after evil
    :config
    (setq undo-limit 67108864)          ; 64mb.
    (setq undo-strong-limit 100663296)  ; 96mb.
    (setq undo-outer-limit 1006632960)) ; 960mb.

#+end_src

We also use [[https://codeberg.org/ideasman42/emacs-undo-fu-session][undo fu session]] to persist the undo/redo history through emacs sessions. This means the undo history won't be lost when restarting emacs.
#+begin_src emacs-lisp

  (use-package undo-fu-session
    :after undo-fu
    :config
    (undo-fu-session-global-mode)
    (setq undo-fu-session-incompatible-files
          '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'")))

#+end_src

** Vundo
Alongside [[#undo-fu][undo fu]] we also use [[https://github.com/casouri/vundo][vundo]] to show the undo history in a tree graph. This makes moving around the undo history super easy. Here we improve the default vundo to use unicode symbols, better colors as well as a easy keybind to get inside vundo.
#+begin_src emacs-lisp

  (use-package vundo
    :commands vundo
    :custom
    (vundo-glyph-alist vundo-unicode-symbols)
    :config
    ;; Take less on-screen space.
    (setq vundo-compact-display t))

  (with-eval-after-load 'evil (evil-define-key 'normal 'global (kbd "C-M-u") 'vundo))

#+end_src

;; Local Variables:
;; eval: (rainbow-delimiters-mode)
;; End:
